import nest_asyncio
nest_asyncio.apply()

from telegram import Update, BotCommand
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    CallbackContext,
    PicklePersistence
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, date
import logging
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ID —Å—Ç–∏–∫–µ—Ä–æ–≤ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏)
STICKERS = {
    'welcome': 'CAACAgIAAxkBAAENjGtn2GGb-45eD87nqDZionFWKfLugwAC_AAD9wLID-JKwmellSruNgQ',  # ID –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞
    'birthday': 'CAACAgIAAxkBAAEOGHtn8RZ6ytZKXE03JJ5hNQcTmnK3MQACrA0AAuJ8CEocdg_Chn4uTzYE',  # ID –ø—Ä–∞–∑–¥–Ω–∏—á–Ω–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞
    'holidayNewYear': 'CAACAgIAAxkBAAEOGIFn8Rdzyens1cEgidXS5Tv4wpNPJwACuwUAAj-VzArB-QxoNNQdNjYE',    # ID –Ω–æ–≤—ã–π –≥–æ–¥
    'holiday23': 'CAACAgIAAxkBAAEOGIln8RfUZEG02SRE8wjmUiJDzdowvQACZAkAAnlc4glT3Md3btp8xzYE',    # ID —Å—Ç–∏–∫–µ—Ä–∞ –¥–ª—è 23 —Ñ–µ–≤—Ä–∞–ª—è
    'holiday8': 'CAACAgIAAxkBAAEOGH1n8RaD87_J8PyYugiAc5z7yd0WagACTwkAAnlc4gkq22o1wb7e2jYE',    # ID —Å—Ç–∏–∫–µ—Ä–∞ 8 –º–∞—Ä—Ç–∞
    'holiday': 'CAACAgIAAxkBAAENjG9n2GG83yzE3tgp6gveEZHR-hxQzQAC9wAD9wLID9CX3j-K0TwONgQ',    # ID —Å—Ç–∏–∫–µ—Ä–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫
}

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –∏ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π
holidays = {
    '01-01': {'text': 'üéÑ –° –ù–æ–≤—ã–º –≥–æ–¥–æ–º! üéÑ', 'sticker': 'holidayNewYear'},
    '23-02': {'text': 'ü™ñ –° –î–Ω—ë–º –∑–∞—â–∏—Ç–Ω–∏–∫–∞ –û—Ç–µ—á–µ—Å—Ç–≤–∞!', 'sticker': 'holiday23'},
    '08-03': {'text': 'üå∏ –° –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º –∂–µ–Ω—Å–∫–∏–º –¥–Ω—ë–º!', 'sticker': 'holiday8'},
    '09-05': {'text': 'üéñÔ∏è –° –î–Ω—ë–º –ü–æ–±–µ–¥—ã!', 'sticker': 'holiday'},
    '31-12': {'text': 'üéÖ –° –Ω–∞—Å—Ç—É–ø–∞—é—â–∏–º –ù–æ–≤—ã–º –≥–æ–¥–æ–º!', 'sticker': 'holidayNewYear'}
}

birthdays = {
    '25-04': '–ò–º—è_–∫–æ–ª–ª–µ–≥–∏',
    '07-02': '–ò–º—è_–∫–æ–ª–ª–µ–≥–∏2'
}

class ReminderBot:
    def __init__(self, token):
        self.token = token
        self.persistence = PicklePersistence(filepath='reminder_bot_data')
        self.application = Application.builder() \
    .token(token) \
    .persistence(self.persistence) \
    .read_timeout(30) \
    .connect_timeout(30) \
    .pool_timeout(30) \
    .build()
        self.scheduler = AsyncIOScheduler(
            job_defaults={
        'misfire_grace_time': 60*60,  # 1 —á–∞—Å
        'coalesce': True,
        'max_instances': 1
    }
        )

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("help", self.help))
        self.application.add_handler(CommandHandler("add_birthday", self.add_birthday))
        self.application.add_handler(CommandHandler("list_birthdays", self.list_birthdays))
        self.application.add_handler(CommandHandler("del_birthday", self.del_birthday))

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
        self.application.post_init = self._setup_commands_menu

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        self.scheduler.add_job(
            self.send_reminders,
            'cron',
            hour=9,
            minute=30,
            timezone='Europe/Moscow'
        )

    async def _setup_commands_menu(self, application):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
        commands = [
            BotCommand("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
            BotCommand("help", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"),
            BotCommand("add_birthday", "–î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è"),
            BotCommand("del_birthday", "–£–¥–∞–ª–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è"),
            BotCommand("list_birthdays", "–°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π")
        ]
        await application.bot.set_my_commands(commands)

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å—Ç–∏–∫–µ—Ä–∞"""
        await update.message.reply_sticker(STICKERS['welcome'])

        user = update.effective_user
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞.\n"
            "–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è –∫–æ–ª–ª–µ–≥ –∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        chat_id = update.effective_chat.id
        if 'chat_ids' not in context.bot_data:
            context.bot_data['chat_ids'] = set()
        context.bot_data['chat_ids'].add(chat_id)

    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
      """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
      help_text = """
      *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

      */start* - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
      */help* - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
      */add_birthday* - –î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è
„ÄÄ„ÄÄ  –§–æ—Ä–º–∞—Ç: `/add_birthday –î–î-–ú–ú –ò–º—è –§–∞–º–∏–ª–∏—è`
      */del_birthday* - –£–¥–∞–ª–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è
„ÄÄ„ÄÄ  –§–æ—Ä–º–∞—Ç: `/del_birthday –î–î-–ú–ú`
      */list_birthdays* - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π

      *–ü—Ä–∏–º–µ—Ä—ã:*
      `/add_birthday 15-05 –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤`
      `/del_birthday 15-05`
      """
      await update.message.reply_text(
        help_text,
        parse_mode="Markdown",  # –í–∫–ª—é—á–∞–µ–º Markdown-—Ä–∞–∑–º–µ—Ç–∫—É
        disable_web_page_preview=True
    )

    async def add_birthday(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫"""
        try:
            date_str, *name_parts = context.args
            name = ' '.join(name_parts)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
            datetime.strptime(date_str, '%d-%m')

            if 'birthdays' not in context.bot_data:
                context.bot_data['birthdays'] = {}
            context.bot_data['birthdays'][date_str] = name

            await update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: {date_str} - {name}")
        except (ValueError, IndexError):
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_birthday –î–î-–ú–ú –ò–º—è –§–∞–º–∏–ª–∏—è")

    async def del_birthday(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–£–¥–∞–ª—è–µ—Ç –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞"""
        try:
            if not context.args:
                raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω–∞ –¥–∞—Ç–∞")

            date_str = context.args[0]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
            datetime.strptime(date_str, '%d-%m')

            if 'birthdays' not in context.bot_data or date_str not in context.bot_data['birthdays']:
                await update.message.reply_text(f"‚ùå –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–∞ {date_str} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
            del context.bot_data['birthdays'][date_str]
            await update.message.reply_text(f"‚úÖ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–∞ {date_str} —É–¥–∞–ª–µ–Ω")

        except ValueError:
            error_message = (
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
                "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: /del_birthday –î–î-–ú–ú\n"
                "–ü—Ä–∏–º–µ—Ä: /del_birthday 15-05"
            )
            await update.message.reply_text(error_message)

    async def list_birthdays(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π"""
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è
        saved_birthdays = context.bot_data.get('birthdays', {})

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –¥–Ω—è–º–∏ —Ä–æ–∂–¥–µ–Ω–∏—è
        all_birthdays = {**birthdays, **saved_birthdays}

        if not all_birthdays:
            await update.message.reply_text("–°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π –ø—É—Å—Ç.")
            return

        text = "üìÖ –°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π:\n"
        for date_str, name in sorted(all_birthdays.items()):
            text += f"{date_str} - {name}\n"

        await update.message.reply_text(text)

    async def send_reminders(self):       
     
      today = date.today().strftime('%d-%m')
      logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ {today}")

      try:
          
          bot_data = self.application.bot_data
        
          if 'chat_ids' not in bot_data or not bot_data['chat_ids']:
              logger.warning("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏") 
              return

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è
          all_birthdays = {**birthdays, **bot_data.get('birthdays', {})}
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π
          if today in all_birthdays:
            name = all_birthdays[today]
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: {name}")
            for chat_id in bot_data['chat_ids']:
                try:
                    await self.application.bot.send_sticker(
                        chat_id=chat_id,
                        sticker=STICKERS['birthday']
                    )
                    await self.application.bot.send_message(
                        chat_id=chat_id,
                        text=f"üéâ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É {name}! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç {chat_id}: {e}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤
          if today in holidays:
            holiday = holidays[today]
            for chat_id in bot_data['chat_ids']:
                try:
                    await self.application.bot.send_sticker(
                        chat_id=chat_id,
                        sticker=STICKERS[holiday['sticker']]
                    )
                    await self.application.bot.send_message(
                        chat_id=chat_id,
                        text=holiday['text']
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞ –≤ —á–∞—Ç {chat_id}: {e}")
                    
      except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ send_reminders: {e}", exc_info=True)
                    

    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        self.scheduler.start()
        
        try:
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω
            asyncio.get_event_loop().run_until_complete(
                self.application.bot.delete_webhook(drop_pending_updates=True)
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            self.application.run_polling(
                close_loop=False,
                stop_signals=None,
                allowed_updates=None,
                drop_pending_updates=True
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
        finally:
            self.scheduler.shutdown()

if __name__ == '__main__':
    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ nest-asyncio –¥–ª—è Jupyter
    !pip install nest-asyncio

    # –ü—Ä—è–º–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ —Ç–æ–∫–µ–Ω–∞
    token = 'TELEGRAM_TOKEN'

    bot = ReminderBot(token)
    bot.run()